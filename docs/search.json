[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Good Software Engineering Practice for R Packages",
    "section": "",
    "text": "Welcome to the homepage of the workshop “Good Software Engineering Practice for R Packages”. In this face-to-face course participants will learn hands-on skills and tools to engineer reliable R packages used in biostatistics. The day will be a mix of presentations and team exercises to build a small R package. Participants need to be comfortable with writing functions in R and bring their own laptops."
  },
  {
    "objectID": "index.html#next-event",
    "href": "index.html#next-event",
    "title": "Good Software Engineering Practice for R Packages",
    "section": "Next Event",
    "text": "Next Event\nThe next event will be held on 10 February 2023 jointly with the BBS as face-to-face meeting in Basel. Registration is closed but there is a waiting list."
  },
  {
    "objectID": "index.html#communication",
    "href": "index.html#communication",
    "title": "Good Software Engineering Practice for R Packages",
    "section": "Communication",
    "text": "Communication\nWe offer a gitter chat channel to communicate before, during, and after the course."
  },
  {
    "objectID": "index.html#workshop-program",
    "href": "index.html#workshop-program",
    "title": "Good Software Engineering Practice for R Packages",
    "section": "Workshop Program",
    "text": "Workshop Program\n\n\n\n\n\n09:00 - 09:45\nIntroduction and outline\n\n\n09:45 - 10:45\nR packages, what are they? + practical\n\n\n10:45 - 12:00\nWorkflow for creating R packages + practical\n\n\n12:00 - 13:00\nLunch break, chat & network\n\n\n13:00 - 14:00\nPackage quality + exercise\n\n\n14:00 - 15:30\nCollaboration with git & GitHub + group practical\n\n\n15:30 - 16:00\nCoffee break, chat & network\n\n\n16:00 - 17:00\nPublication + practical\n\n\n17:00 - 17:45\nBuffer, recap + wrap-up\n\n\n18:30 - 20:30\nOptional dinner"
  },
  {
    "objectID": "index.html#prerequisites-technical-setup",
    "href": "index.html#prerequisites-technical-setup",
    "title": "Good Software Engineering Practice for R Packages",
    "section": "Prerequisites & Technical Setup",
    "text": "Prerequisites & Technical Setup\nPrior to the course, participants should\n\nset up a (free) GitHub.com account. There are other git Platforms like Gitlab or Bitbucket but we made the choice to go with GitHub.com for the course since it is by far the most relevant git platform in the R community.\ndownload and extract simulatr.zip\neither make sure they have a working R software development setup on their own laptop (up-to-date git/Rtools/R/RStudio) or get access to https://posit.cloud. The latter offers a free tier account with 25 hours of computing time per months and can be accessed using ones GitHub.com account.\n\nFor the course, participants are required to bring their own laptop to be able to participate in the exercises.\n\nOptional reading list\n\nExcellent and very comprehensive R Packages (2e)\n(Hardcore) description of how Writing R Extensions works\nGitHub ‘Hello World’ tutorial on how to use GitHub.com (does not require git command line knowledge)\nTutorial on version control with git and SVN (we will be using git)\nCommand line git mini intro trygit\nfirst steps with git & github by RStudio\nRStudio cheatsheets/ Git & GitHub"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "GSWEP4R Workshop",
    "section": "",
    "text": "Attribution 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public: \nwiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nIf You Share Adapted Material You produce, the Adapter’s License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "slides/01_intro.html#disclaimer",
    "href": "slides/01_intro.html#disclaimer",
    "title": "Introduction",
    "section": "Disclaimer",
    "text": "Disclaimer\n\nAny opinions expressed in this presentation and on the following slides are solely those of the presenter and not necessarily those of their respective employer or company."
  },
  {
    "objectID": "slides/01_intro.html#daniel",
    "href": "slides/01_intro.html#daniel",
    "title": "Introduction",
    "section": "Daniel",
    "text": "Daniel\n\n\n\n\n\nStatistician (Ph.D. in 2013 on Bayesian Model Selection)\nBiostatistician at Roche for 5 years, Data Scientist at Google for 2 years, Statistical Software Engineer at Roche for the last 3 years\nMultiple R packages on CRAN and Bioconductor, co-wrote book on Likelihood and Bayesian Inference, chair of the ASA BIOP working group on Software Engineering (SWE WG)\nfeel free to connect at  LinkedIn or  Github"
  },
  {
    "objectID": "slides/01_intro.html#friedrich",
    "href": "slides/01_intro.html#friedrich",
    "title": "Introduction",
    "section": "Friedrich",
    "text": "Friedrich\n\n\n\nSince 2008 self-employed consultant for computer science and data science as well as biostatistics\nCo-founder and CEO of RPACT, a company developing the formally validated R package rpact with 21 releases on CRAN since 2018\nTrained software architect; R programmer since 2004; R Shiny developer since 2019\nFeel free to connect at  LinkedIn or  Github"
  },
  {
    "objectID": "slides/01_intro.html#kevin",
    "href": "slides/01_intro.html#kevin",
    "title": "Introduction",
    "section": "Kevin",
    "text": "Kevin\n\n\n\n\n\nTrained in math, ‘statistical engineer’ by heart\nResearch associate in Heidelberg & Cambridge\n\noptimal clinical trial design\nstatistical genetics & high dimensional data\n\nMethodology statistician with BI since ’21\nR-tist, extensive experience with R packages, version control, and high-performance computing\nfeel free to connect at  LinkedIn or  Github"
  },
  {
    "objectID": "slides/01_intro.html#what-you-will-learn-today",
    "href": "slides/01_intro.html#what-you-will-learn-today",
    "title": "Introduction",
    "section": "What you will learn today",
    "text": "What you will learn today\n\nUnderstand the basic structure of an R \nCreate your own R package\nLearn about & apply professional  development workflow\nLearn & apply fundamentals of quality control for R \nGet crash-course in version control to stay organized\nTry out modern collaboration techniques on GitHub.com\nLearn how to make R  available to others"
  },
  {
    "objectID": "slides/01_intro.html#program-outline",
    "href": "slides/01_intro.html#program-outline",
    "title": "Introduction",
    "section": "Program outline",
    "text": "Program outline\n\n\n\n\n\n09:00 - 09:45\nIntroduction and outline\n\n\n09:45 - 10:45\nR packages, what are they? + practical\n\n\n10:45 - 12:00\nWorkflow for creating R packages + practical\n\n\n12:00 - 13:00\nLunch break, chat & network\n\n\n13:00 - 14:00\nPackage quality + exercise\n\n\n14:00 - 15:30\nCollaboration with git & GitHub + group practical\n\n\n15:30 - 16:00\nCoffee break, chat & network\n\n\n16:00 - 17:00\nPublication + practical\n\n\n17:00 - 17:45\nBuffer, recap + wrap-up\n\n\n18:30 - 20:30\nOptional dinner"
  },
  {
    "objectID": "slides/01_intro.html#house-keeping",
    "href": "slides/01_intro.html#house-keeping",
    "title": "Introduction",
    "section": "House-keeping",
    "text": "House-keeping\n\nCourse website at kkmann.github.io/workshop-r-swe\n\nall slides\nsources available at github.com/kkmann/workshop-r-swe\nall materials CC-BY 4.0\n\nWe have a gitter chat channel for this course that you can connect to\n\nuse to ask your peers questions\nwill try to monitor during course\n\nslido.com: #3112331"
  },
  {
    "objectID": "slides/01_intro.html#what-you-will-need",
    "href": "slides/01_intro.html#what-you-will-need",
    "title": "Introduction",
    "section": "What you will need",
    "text": "What you will need\n\nGithub.com (free) account \nRecommended: posit.cloud \n\nFree tier sufficient\nComes with everything installed\nAlternative: local R development environment with\n\ngit \nRtools/R/Rstudio IDE \n\n\nCuriosity 🦝\nPositive attitude 😄"
  },
  {
    "objectID": "slides/01_intro.html#what-do-we-mean-by-gswep4r",
    "href": "slides/01_intro.html#what-do-we-mean-by-gswep4r",
    "title": "Introduction",
    "section": "What do we mean by GSWEP4R*?",
    "text": "What do we mean by GSWEP4R*?\n\n\n* Good Software Engineering Practice for R\n\nApplying concept of GxP to SWE with R\nImprove quality of R code/packages, particularly in regulated enviroments but not limited to!\nNot a fixed term, we share our perspectives\nCollection of best practices\nDo not reinvent the wheel: learn from IT/open source space"
  },
  {
    "objectID": "slides/01_intro.html#why-care-about-gswep4r",
    "href": "slides/01_intro.html#why-care-about-gswep4r",
    "title": "Introduction",
    "section": "Why care about GSWEP4R?",
    "text": "Why care about GSWEP4R?\n\nMove to / integration of R in pharma is clear trend\nR is a powerful yet complex ecosystem\n\nCore component: R packages\nMature analysts: users & contributors\nDeep understanding crucial, even to just assess quality\n\nAnalyses increasingly require complex scripts/programs  \\(\\leadsto\\) line between programming and data analysis blurs\nValue: de-risking use of R and efficiency gains"
  },
  {
    "objectID": "slides/01_intro.html#start-small---from-script-to-package",
    "href": "slides/01_intro.html#start-small---from-script-to-package",
    "title": "Introduction",
    "section": "Start small - from script to package",
    "text": "Start small - from script to package\n\nEncapsulate behavior (functions)\nAvoid global state/variables\nAdopt consistent coding style\nDocument well\nAdd test cases\nVersion your code\nShare as ‘bundle’\n\n\\(\\leadsto\\) R package"
  },
  {
    "objectID": "slides/01_intro.html#the-r-package-ecosystem---huge-success",
    "href": "slides/01_intro.html#the-r-package-ecosystem---huge-success",
    "title": "Introduction",
    "section": "The R package ecosystem - huge success",
    "text": "The R package ecosystem - huge success\n\nif (!file.exists(\"resources/pkg_graph.png\")) { # primitive caching\n  library(tidyverse)\n  local({\n    r <- getOption(\"repos\")\n    r[\"CRAN\"] <- \"https://cloud.r-project.org\" \n    options(repos = r)\n  })\n  # get pkg cumulative downloads from last month\n  db <- tools::CRAN_package_db()\n  tbl_dl_ <- db %>%\n      group_by(chunk = row_number() %/% 100) %>% # chunk to comply with API limit\n      nest() %>%\n      mutate(\n          res = purrr::map2(\n              data, chunk,\n              function(data, id) {\n                  cranlogs::cran_downloads(data$Package, when = \"last-month\") %>%\n                      group_by(package) %>%\n                      summarize(count = sum(count))\n              }\n          )\n      ) %>%\n      ungroup() %>%\n      select(res) %>%\n      unnest(res) %>%\n      distinct()\n  tbl_dl <- filter(tbl_dl_, count >= 10000L, !is.na(count))\n  tbl_deps <- tools::package_dependencies(\n        tbl_dl$package,\n        which = c(\"Imports\", \"Depends\", \"LinkingTo\")\n      ) %>% \n      enframe(name = \"from\", value = \"to\") %>% \n      unnest(to)\n  grph_deps <- tidygraph::as_tbl_graph(tbl_deps) %>% \n    left_join(\n      tbl_dl_,\n      by = c(name = \"package\")\n    ) %>% \n    filter(!is.na(count)) # remove base packages\n  plt <- ggraph::ggraph(grph_deps, layout = \"linear\", circular = TRUE) +\n      ggraph::geom_edge_link(alpha = .033) + \n      ggraph::geom_node_label(\n          aes(label = if_else(count > quantile(count, 0.975, na.rm = TRUE), name, NA_character_)),\n          repel = TRUE\n      ) +\n      ggraph::theme_graph()\n  ggsave(\"resources/pkg_graph.png\", plot = plt, width = 8, height = 8/1.61, dpi = 300)\n}\nknitr::include_graphics(\"resources/pkg_graph.png\")"
  },
  {
    "objectID": "slides/01_intro.html#gxp-r",
    "href": "slides/01_intro.html#gxp-r",
    "title": "Introduction",
    "section": "GxP + R  = ",
    "text": "GxP + R  = \n\nCore infrastructure packages only through industry\nQuality, burden sharing: open-source pharmaverse and others\nOpen methodological packages can de-risk innovative methods\nR packages make (statistical/methodological) code\n\ntestable (with documented evidence thereof, CRF 11)\nreusable\nshareable\neasier to document"
  },
  {
    "objectID": "slides/05_collaboration.html#mermaid-takes-the-pain-out-of-git-diagrams",
    "href": "slides/05_collaboration.html#mermaid-takes-the-pain-out-of-git-diagrams",
    "title": "Collaboration",
    "section": "Mermaid takes the pain out of git diagrams :)",
    "text": "Mermaid takes the pain out of git diagrams :)\n\n\n\n\ngitGraph\n   commit\n   commit\n   branch develop\n   checkout develop\n   commit\n   commit\n   checkout main\n   merge develop\n   commit\n   commit"
  },
  {
    "objectID": "slides/05_collaboration.html#demo",
    "href": "slides/05_collaboration.html#demo",
    "title": "Collaboration",
    "section": "Demo",
    "text": "Demo\ndemo / exercise"
  },
  {
    "objectID": "slides/listing.html",
    "href": "slides/listing.html",
    "title": "Slides",
    "section": "",
    "text": "Introduction\n\n\n\n\n\nIntroduction of speakers, get-to-know the audience, organisation, outline of program.Photo CC0 by Mabel Amber on pexels.com.\n\n\n\n\n\n\nDaniel, Friedrich, Kevin\n\n\n\n\n\n\n  \n\n\n\n\nR packages\n\n\n\n\n\ndescription. Photo CC0 by cottonbro studio on pexels.com.\n\n\n\n\n\n\nDaniel\n\n\n\n\n\n\n  \n\n\n\n\nAn R Package Engineering Workflow\n\n\nBBS Course: Good Software Engineering Practice with R\n\n\nWorkflow for creating R packages + practicalPhoto CC0 by Andrea Piacquadio on pexels.com\n\n\n\n\n\n\nFeb 10, 2023\n\n\nFriedrich\n\n\n\n\n\n\n  \n\n\n\n\nEnsuring Quality\n\n\nBBS Course: Good Software Engineering Practice with R\n\n\nPackage quality + exercisePhoto CC0 by Pixabay on pexels.com\n\n\n\n\n\n\nFeb 10, 2023\n\n\nFriedrich\n\n\n\n\n\n\n  \n\n\n\n\nCollaboration\n\n\n\n\n\ndescription. Photo CC0 by THIS IS ZUN on pexels.com.\n\n\n\n\n\n\nKevin\n\n\n\n\n\n\n  \n\n\n\n\nPublication\n\n\n\n\n\ndescription. Photo CC0 by Andrea Piacquadio on pexels.com.\n\n\n\n\n\n\n…\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "slides/01_intro.html",
    "href": "slides/01_intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Any opinions expressed in this presentation and on the following slides are solely those of the presenter and not necessarily those of their respective employer or company."
  },
  {
    "objectID": "slides/02_r_packages.html",
    "href": "slides/02_r_packages.html",
    "title": "R packages",
    "section": "",
    "text": "Structure\nexercise"
  },
  {
    "objectID": "slides/05_collaboration.html",
    "href": "slides/05_collaboration.html",
    "title": "Collaboration",
    "section": "",
    "text": "VCS (<-> quality), github"
  },
  {
    "objectID": "slides/03_workflow.html#typical-work-steps",
    "href": "slides/03_workflow.html#typical-work-steps",
    "title": "An R Package Engineering Workflow",
    "section": "Typical work steps",
    "text": "Typical work steps\n\n\n\n\nIdea\nConcept creation\nValidation planning\nSpecification\n(URS, FS, and SDS)\nR package programming\n\n\n\nDocumented verification\nCompletion of formal validation\nR package release\nUse in production\nMaintenance"
  },
  {
    "objectID": "slides/03_workflow.html#agile-model",
    "href": "slides/03_workflow.html#agile-model",
    "title": "An R Package Engineering Workflow",
    "section": "Agile Model",
    "text": "Agile Model"
  },
  {
    "objectID": "slides/03_workflow.html#frequently-used-workflow-in-practice",
    "href": "slides/03_workflow.html#frequently-used-workflow-in-practice",
    "title": "An R Package Engineering Workflow",
    "section": "Frequently Used Workflow in Practice",
    "text": "Frequently Used Workflow in Practice\n\n\n\n\nIdea\nR package programming\nUse in production\nBug fixing\nUse in production\n\n\n\nBug fixing + Documentation\nUse in production\nBug fixing + Further development\nUse in production\nBug fixing + …\n\n\n\n\n\n Bad practice!\n\n\n Why?"
  },
  {
    "objectID": "slides/03_workflow.html#why-practice-good-engineering-1",
    "href": "slides/03_workflow.html#why-practice-good-engineering-1",
    "title": "An R Package Engineering Workflow",
    "section": "Why practice good engineering?",
    "text": "Why practice good engineering?\n\n\nOrigin of errors in system development\n\nBoehm, B. (1981). Software Engineering Economics. Prentice Hall."
  },
  {
    "objectID": "slides/03_workflow.html#why-practice-good-engineering-2",
    "href": "slides/03_workflow.html#why-practice-good-engineering-2",
    "title": "An R Package Engineering Workflow",
    "section": "Why practice good engineering?",
    "text": "Why practice good engineering?\n\n\n\nDon’t waste time on maintenance\nBe faster with release on CRAN\nDon’t waste time with inefficient and buggy further development\n\n\n\nFulfill regulatory requirements1\nSave refactoring time when the PoC becomes the release version\nYou don’t have to be shy any longer about inviting other developers to contribute to the package on GitHub\n\n\n\nSee also Ensuring Quality by Friedrich"
  },
  {
    "objectID": "slides/03_workflow.html#why-practice-good-engineering-3",
    "href": "slides/03_workflow.html#why-practice-good-engineering-3",
    "title": "An R Package Engineering Workflow",
    "section": "Why practice good engineering?",
    "text": "Why practice good engineering?\nInvest time in\n\nrequirements analysis,\nsoftware design, and\narchitecture…\n\n\n… but in many cases the workflow must be workable for a single developer or a small team."
  },
  {
    "objectID": "slides/03_workflow.html#example---step-1-idea",
    "href": "slides/03_workflow.html#example---step-1-idea",
    "title": "An R Package Engineering Workflow",
    "section": "Example - Step 1: Idea",
    "text": "Example - Step 1: Idea\nLet’s assume that you used some lines of code to create simulated data in multiple projects:\n\ndat <- data.frame(\n    group = c(rep(1, 50), rep(2, 50)),\n    values = c(\n        rnorm(n = 50, mean = 8, sd = 12),\n        rnorm(n = 50, mean = 14, sd = 11)\n    )\n)\n\nIdea: put the code into a package"
  },
  {
    "objectID": "slides/03_workflow.html#example---step-2-design-docs",
    "href": "slides/03_workflow.html#example---step-2-design-docs",
    "title": "An R Package Engineering Workflow",
    "section": "Example - Step 2: Design docs",
    "text": "Example - Step 2: Design docs\n\nDescribe the purpose and scope of the package\nAnalyse and describe the requirements in clear and simple terms (“prose”)\n\n\n\n\nObligation level\nKey word1\nDescription\n\n\n\n\nDuty\nshall\n“must have”\n\n\nDesire\nshould\n“nice to have”\n\n\nIntention\nwill\n“optional”\n\n\n\nRupp, C., & SOPHISTen, die. (2009). Requirements-Engineering und -Management: Professionelle, iterative Anforderungsanalyse für die Praxis (5. Ed.). Carl Hanser Verlag GmbH & Co. KG."
  },
  {
    "objectID": "slides/03_workflow.html#example---step-2-design-docs-1",
    "href": "slides/03_workflow.html#example---step-2-design-docs-1",
    "title": "An R Package Engineering Workflow",
    "section": "Example - Step 2: Design docs",
    "text": "Example - Step 2: Design docs\nPurpose and Scope\nThe R package simulatr shall enable the creation of reproducible fake data.\nPackage Requirements\nsimulatr shall provide a function to generate normal distributed random data for two independent groups. The function shall allow flexible definition of sample size per group, mean per group, standard deviation per group. The reproducibility of the simulated data shall be ensured via an optional seed It should be possible to print the function result. A graphical presentation of the simulated data will also be possible."
  },
  {
    "objectID": "slides/03_workflow.html#example---step-2-design-docs-2",
    "href": "slides/03_workflow.html#example---step-2-design-docs-2",
    "title": "An R Package Engineering Workflow",
    "section": "Example - Step 2: Design docs",
    "text": "Example - Step 2: Design docs\n\n\nUseful formats / tools for design docs:\n\nR Markdown1 (*.Rmd)\nQuarto1 (*.qmd)\nOverleaf2\ndraw.io3\n\n\n\nUML Diagram\n\n\n\n\n\n\n\n\nBased on Markdown, the easy-to-use markup languageThe easy to use, online, collaborative LaTeX editorA picture is worth a thousand words"
  },
  {
    "objectID": "slides/03_workflow.html#example---step-3-packaging",
    "href": "slides/03_workflow.html#example---step-3-packaging",
    "title": "An R Package Engineering Workflow",
    "section": "Example - Step 3: Packaging",
    "text": "Example - Step 3: Packaging\nR package programming\n\nCreate basic package project (see R Packages by Daniel)\nC&P existing R scripts (one-off scripts, prototype functions) and refactor1 it if necessary\nCreate R generic functions\nDocument all functions\n\nSee also Ensuring Quality by Friedrich"
  },
  {
    "objectID": "slides/03_workflow.html#example---step-3-packaging-1",
    "href": "slides/03_workflow.html#example---step-3-packaging-1",
    "title": "An R Package Engineering Workflow",
    "section": "Example - Step 3: Packaging",
    "text": "Example - Step 3: Packaging\nOne-off script as starting point:\n\nsim.data <- function(n1, n2, m1, m2, s1, s2) {\n    data.frame(\n        group = c(rep(1, n1), rep(2, n2)),\n        values = c(\n            rnorm(n = n1, mean = m1, sd = s1),\n            rnorm(n = n2, mean = m2, sd = s2)\n        )\n    )\n}"
  },
  {
    "objectID": "slides/03_workflow.html#example---step-3-packaging-2",
    "href": "slides/03_workflow.html#example---step-3-packaging-2",
    "title": "An R Package Engineering Workflow",
    "section": "Example - Step 3: Packaging",
    "text": "Example - Step 3: Packaging\nRefactored script:\n\ngetSimulatedTwoArmMeans <- function(n1, n2, mean1, mean2, sd1, sd2) {\n    data.frame(\n        group = c(rep(1, n1), rep(2, n2)),\n        values = c(\n            rnorm(n = n1, mean = mean1, sd = sd1),\n            rnorm(n = n2, mean = mean2, sd = sd2)\n        )\n    )\n}\n\nAlmost all functions, arguments, and objects should be self-explanatory due to their names."
  },
  {
    "objectID": "slides/03_workflow.html#example---step-3-packaging-3",
    "href": "slides/03_workflow.html#example---step-3-packaging-3",
    "title": "An R Package Engineering Workflow",
    "section": "Example - Step 3: Packaging",
    "text": "Example - Step 3: Packaging\nDefine that the result is a list1 which is defined as class2:\n\ngetSimulatedTwoArmMeans <- function(n1, n2, mean1, mean2, sd1, sd2) {\n    result <- list(n1 = n1, n2 = n2, \n         mean1 = mean1, mean2 = mean2, sd1 = sd1, sd2 = sd2)\n    result$data <- data.frame(\n        group = c(rep(1, n1), rep(2, n2)),\n        values = c(\n            rnorm(n = n1, mean = mean1, sd = sd1),\n            rnorm(n = n2, mean = mean2, sd = sd2)\n        )\n    )\n    # set the class attribute\n    result <- structure(result, class = \"SimulationResult\")\n    return(result)\n}\n\nIt’s common practice to add the function arguments to the result \\(\\rightarrow\\) should be a list or classTo implement generics, the result must be a class"
  },
  {
    "objectID": "slides/03_workflow.html#example---step-3-packaging-4",
    "href": "slides/03_workflow.html#example---step-3-packaging-4",
    "title": "An R Package Engineering Workflow",
    "section": "Example - Step 3: Packaging",
    "text": "Example - Step 3: Packaging\nThe output is impractical, e.g., we need to scroll down:\n\nx <- getSimulatedTwoArmMeans(n1 = 50, n2 = 50, mean1 = 5, mean2 = 7, sd1 = 3, sd2 = 4)\nx\n\n$n1\n[1] 50\n\n$n2\n[1] 50\n\n$mean1\n[1] 5\n\n$mean2\n[1] 7\n\n$sd1\n[1] 3\n\n$sd2\n[1] 4\n\n$data\n    group     values\n1       1  7.7105800\n2       1  5.2753799\n3       1 -0.3799196\n4       1  3.1565106\n5       1  1.5291985\n6       1  5.8045930\n7       1  5.0815875\n8       1  4.1065623\n9       1  7.6935120\n10      1  1.4269623\n11      1  5.0380992\n12      1  1.9144411\n13      1 -0.5245204\n14      1  4.8152554\n15      1 10.7234799\n16      1  7.6731746\n17      1  4.6971718\n18      1  7.4541059\n19      1 -2.9584634\n20      1  6.0135063\n21      1  8.7414776\n22      1  7.3855897\n23      1 11.6806483\n24      1  3.0921494\n25      1  8.1731085\n26      1  1.8897376\n27      1  3.9505627\n28      1  6.6362629\n29      1  6.5342104\n30      1 -2.2421732\n31      1  2.2698619\n32      1  7.8834871\n33      1  0.9690619\n34      1  2.3419044\n35      1  4.3489737\n36      1  6.0652932\n37      1  3.4176847\n38      1  4.0866184\n39      1  3.0327478\n40      1  6.3328628\n41      1  9.3535112\n42      1  7.2166667\n43      1  5.8790529\n44      1  6.3788694\n45      1  7.5905165\n46      1  0.3758047\n47      1  6.1980015\n48      1  3.4038192\n49      1  2.6082501\n50      1  6.8999698\n51      2  7.6035017\n52      2  6.8765579\n53      2  4.2916270\n54      2  3.5624262\n55      2  5.6049685\n56      2  6.6883748\n57      2  2.2861998\n58      2  7.6030061\n59      2  7.2893829\n60      2  5.7441905\n61      2  8.6255675\n62      2  2.2382151\n63      2 10.5234014\n64      2 10.8514894\n65      2  3.8130447\n66      2  9.3906443\n67      2  6.5413613\n68      2 15.6428227\n69      2  5.1151484\n70      2  8.0469999\n71      2 10.1389636\n72      2  5.9749500\n73      2 15.3194491\n74      2  7.9250741\n75      2  7.1319501\n76      2  6.0454230\n77      2 15.4035323\n78      2  5.9269027\n79      2  9.4819710\n80      2  4.7717092\n81      2  8.1734349\n82      2  2.9046707\n83      2 11.1184591\n84      2 10.3112337\n85      2 12.6237088\n86      2  6.8427945\n87      2  1.5077332\n88      2  6.5416302\n89      2  7.9567490\n90      2 15.5831837\n91      2  4.2918637\n92      2 10.0970581\n93      2  6.3304566\n94      2 13.6742984\n95      2  2.2606872\n96      2  2.1937786\n97      2  4.6995036\n98      2  0.2122895\n99      2  3.5946186\n100     2 14.0204847\n\nattr(,\"class\")\n[1] \"SimulationResult\"\n\n\n\nSolution: implement generic function print"
  },
  {
    "objectID": "slides/03_workflow.html#example---step-3-packaging-5",
    "href": "slides/03_workflow.html#example---step-3-packaging-5",
    "title": "An R Package Engineering Workflow",
    "section": "Example - Step 3: Packaging",
    "text": "Example - Step 3: Packaging\nGeneric function print:\n\nCodeRoxygenOutput\n\n\n\nprint.SimulationResult <- function(x, ...) {\n    args <- list(n1 = x$n1, n2 = x$n2, \n        mean1 = x$mean1, mean2 = x$mean2, sd1 = x$sd1, sd2 = x$sd2)\n    \n    print(list(\n        args = format(args), \n        data = dplyr::tibble(x$data)\n    ), ...)\n}\nx\n\n\n\n\n#' @title\n#' Print Simulation Result\n#'\n#' @description\n#' Generic function to print a \\code{SimulationResult} object.\n#'\n#' @param x a \\code{SimulationResult} object to print.\n#' @param ... further arguments passed to or from other methods.\n#' \n#' @examples\n#' x <- getSimulatedTwoArmMeans(n1 = 50, n2 = 50, mean1 = 5, \n#'      mean2 = 7, sd1 = 3, sd2 = 4, seed = 123)\n#' print(x)\n#'\n#' @export\n\n\n\n\n\n$args\n   n1    n2 mean1 mean2   sd1   sd2 \n \"50\"  \"50\"   \"5\"   \"7\"   \"3\"   \"4\" \n\n$data\n# A tibble: 100 × 2\n   group values\n   <dbl>  <dbl>\n 1     1  7.71 \n 2     1  5.28 \n 3     1 -0.380\n 4     1  3.16 \n 5     1  1.53 \n 6     1  5.80 \n 7     1  5.08 \n 8     1  4.11 \n 9     1  7.69 \n10     1  1.43 \n# … with 90 more rows"
  },
  {
    "objectID": "slides/03_workflow.html#preparation",
    "href": "slides/03_workflow.html#preparation",
    "title": "An R Package Engineering Workflow",
    "section": "Preparation",
    "text": "Preparation\n\nDownload the unfinished R package simulatr\nExtract the package zip file\nOpen the project with RStudio\nComplete the tasks below"
  },
  {
    "objectID": "slides/03_workflow.html#tasks",
    "href": "slides/03_workflow.html#tasks",
    "title": "An R Package Engineering Workflow",
    "section": "Tasks",
    "text": "Tasks\n\nTask 1Task 2Task 3Task 4Task 5Task 6Task 7\n\n\nAdd assertions to improve the usability and user experience\n\n\n\n\n\n\nTip on assertions\n\n\nUse the package checkmate to validate input arguments.\n\n\n\nExample:\n\nplayWithAssertions <- function(n1) {\n  checkmate::assertInt(n1, lower = 1)\n}\nplayWithAssertions(-1)\n\nError in playWithAssertions(-1) : Assertion on ‘n1’ failed: Element 1 is not >= 1.\n\n\nAdd three additional results:\n\nn total,\ncreation time, and\nallocation ratio\n\n\n\n\n\n\n\nTip on creation time\n\n\nSys.time(), format(Sys.time(), '%B %d, %Y'), Sys.Date()\n\n\n\n\n\nAdd an additional result: t.test result\n\n\nAdd an optional alternative argument and pass it through t.test:\n\n\nalternative = c(\"two.sided\", \"less\", \"greater\")\n\n\n\nImplement the generic functions print and plot.\n\n\n\n\n\n\nTip on print\n\n\nUse the plot example function from above and extend it.\n\n\n\n\n\n\n\n\n\nTip on plot\n\n\nUse R base plot or ggplot2 to create a grouped boxplot of the fake data.\n\n\n\n\n\nImplement the generic functions\n\nsummary,\nkable, and\ncat.\n\n\n\nDocument your functions with Roxygen2"
  },
  {
    "objectID": "slides/04_quality.html#verification-vs-validation",
    "href": "slides/04_quality.html#verification-vs-validation",
    "title": "Ensuring Quality",
    "section": "Verification vs Validation",
    "text": "Verification vs Validation\n\n\nVerification:\nAre we building the product right?\n\nThe product meets a set of specified requirements\nActivities: reviews, inspections, and testing\nGoal: ensure that the product has been designed and implemented correctly\n\n\nValidation:\nAre we building the right product?\n\nEvaluate the product during or at the end of the development process\nShow that the product meet the specified requirements\nGoal: confirm that the product is fit for its intended purpose\n\\(\\rightarrow\\) Refers back to the user’s needs"
  },
  {
    "objectID": "slides/04_quality.html#what-are-unit-tests",
    "href": "slides/04_quality.html#what-are-unit-tests",
    "title": "Ensuring Quality",
    "section": "What are Unit Tests?",
    "text": "What are Unit Tests?\n\nAutomated tests\nRecord the expected output of a function using code\nCheck individual units of code (functions or methods) for correctness\nTypically written by developers as part of the software development process\nTypically run automatically as part of a CI/CD pipeline\nCan be run before committing code changes"
  },
  {
    "objectID": "slides/04_quality.html#why-are-unit-tests-important",
    "href": "slides/04_quality.html#why-are-unit-tests-important",
    "title": "Ensuring Quality",
    "section": "Why are unit tests important?",
    "text": "Why are unit tests important?\n\nCCR#8: TDD\n\n\nHelp to ensure that individual units of code are working correctly\nEnsure that changes to the codebase do not break existing functionality\nExpress the desired behavior in a way that a human can understand\nHelp to identify and fix bugs early on in the development process\nSave time and resources by catching issues before they become more difficult and costly to fix\n\n\n\n\n\n\nUnit tests help to increase the reliability and maintainability of the code"
  },
  {
    "objectID": "slides/04_quality.html#what-other-important-test-types-exist",
    "href": "slides/04_quality.html#what-other-important-test-types-exist",
    "title": "Ensuring Quality",
    "section": "What other important test types exist?",
    "text": "What other important test types exist?\n\nIntegration Testing: Test if different functions or scripts work together as expected\nPerformance Testing: Analyze the performance of the implemented functions and check whether they meet the requirements (UR/UX)\nSnapshot Testing: Record the results in a separate human-readable file and compare it to the output during the test; useful for large/complex outputs and binary formats like plots"
  },
  {
    "objectID": "slides/04_quality.html#how-to-realize-testing-with-r",
    "href": "slides/04_quality.html#how-to-realize-testing-with-r",
    "title": "Ensuring Quality",
    "section": "How to realize testing with R?",
    "text": "How to realize testing with R?\nR package testthat\n\nPopular testing framework for R that is easy to learn and use\nUnit testing, integration testing, and snapshot testing supported\nAlso performance testing, e.g., with help of microbenchmark package"
  },
  {
    "objectID": "slides/04_quality.html#how-to-check-the-package-quality",
    "href": "slides/04_quality.html#how-to-check-the-package-quality",
    "title": "Ensuring Quality",
    "section": "How to check the package quality?",
    "text": "How to check the package quality?\n\npkgbuild: Tools needed to build R packages\nrcmdcheck: Run R CMD check from R and capture results\ndevtools: Tools to make developing R packages easier, e.g., check() automatically builds and checks a source package, using all known best practices"
  },
  {
    "objectID": "slides/04_quality.html#why-is-code-style-important",
    "href": "slides/04_quality.html#why-is-code-style-important",
    "title": "Ensuring Quality",
    "section": "Why is Code Style important?",
    "text": "Why is Code Style important?\n\nCCR#2: Formatting\n\n\nMake the code more readable, maintainable, and consistent\nMake it easier for others to understand and contribute to the codebase\nAdhering to a consistent code style can reduce the number of errors and make debugging simpler\n“Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread.” (The tidyverse style guide)"
  },
  {
    "objectID": "slides/04_quality.html#how-to-optimize-the-code-styling",
    "href": "slides/04_quality.html#how-to-optimize-the-code-styling",
    "title": "Ensuring Quality",
    "section": "How to optimize the code styling?",
    "text": "How to optimize the code styling?\nTwo popular R packages support the tidyverse style guide:\n\nstyler: interactively restyle selected text, files, or entire projects:\n\nstyle_text\nstyle_file\nstyle_pkg\n\nlintr: perform automated checks to confirm that you conform to the style guide\n\nThe devtools function spell_check runs a spell check on text fields in the package description file, manual pages, and optionally vignettes."
  },
  {
    "objectID": "slides/04_quality.html#workflow-example---refactoring",
    "href": "slides/04_quality.html#workflow-example---refactoring",
    "title": "Ensuring Quality",
    "section": "Workflow Example - Refactoring",
    "text": "Workflow Example - Refactoring\nRemember the one-off script:\n\ndat <- data.frame(\n    group = c(rep(1, 50), rep(2, 50)),\n    values = c(\n        rnorm(n = 50, mean = 8, sd = 12),\n        rnorm(n = 50, mean = 14, sd = 11)\n    )\n)"
  },
  {
    "objectID": "slides/04_quality.html#why-is-clean-code-important",
    "href": "slides/04_quality.html#why-is-clean-code-important",
    "title": "Ensuring Quality",
    "section": "Why is Clean Code important?",
    "text": "Why is Clean Code important?\n\nMaintainability: The code is readable and understandable and has a reduced complexity, i.e., it’s easier to fix bugs\nExtensibility: The architecture is simpler, cleaner, and more expressive, i.e., it’s easier to extend the capabilities and the risk of introducing bugs is reduced\nPerformance: The code often runs faster, uses less memory, or is easier to optimize"
  },
  {
    "objectID": "slides/04_quality.html#what-are-common-clean-code-rules",
    "href": "slides/04_quality.html#what-are-common-clean-code-rules",
    "title": "Ensuring Quality",
    "section": "What are common clean code rules?",
    "text": "What are common clean code rules?\n\nNaming: Use descriptive and meaningful names for variables, functions, and classes.\nFormatting: Adhere to consistent indentation, spacing, and bracketing to make the code easy to read.\nSimplicity: Keep the code as simple and straightforward as possible, avoiding unnecessary complexity.\nSingle Responsibility Principle (SRP): Each function should have a single, well-defined purpose.\nDon’t Repeat Yourself (DRY): Avoid duplication of code, either by reusing existing code or creating functions."
  },
  {
    "objectID": "slides/04_quality.html#how-to-apply-clean-code-rules",
    "href": "slides/04_quality.html#how-to-apply-clean-code-rules",
    "title": "Ensuring Quality",
    "section": "How to apply Clean Code Rules?",
    "text": "How to apply Clean Code Rules?\nRecommended quality workflow for R packages:\n\nFollow the naming and styling guidelines (#1, #2)\nContinuously write tests and optimize the code coverage with help of tools (#7, #8)\nDocument the package and functions (#6)\nRegularly refactor your code (#1 - #7, #9)\nPublish your code on GitHub and invite colleagues to contribute (#10)"
  },
  {
    "objectID": "slides/04_quality.html#example",
    "href": "slides/04_quality.html#example",
    "title": "Ensuring Quality",
    "section": "Example",
    "text": "Example\nSuppose you have a code block that performs the same calculation multiple times in your script:\n\nresult1 <- 2 * 3 + 4\nresult2 <- 2 * 5 + 4\nresult3 <- 2 * 7 + 4\n\nYou can create a function to encapsulate this calculation and reuse it multiple times:\n\ncalculate <- function(x) {\n  2 * x + 4\n}\n\nresult1 <- calculate(3)\nresult2 <- calculate(5)\nresult3 <- calculate(7)"
  },
  {
    "objectID": "slides/04_quality.html#example-dont-repeat-yourself",
    "href": "slides/04_quality.html#example-dont-repeat-yourself",
    "title": "Ensuring Quality",
    "section": "Example: Don’t repeat yourself!",
    "text": "Example: Don’t repeat yourself!\n\nCCR#5: DRY\n\nSuppose you have a code block that performs the same calculation multiple times:\n\nresult1 <- 2 * 3 + 4\nresult2 <- 2 * 5 + 4\nresult3 <- 2 * 7 + 4\n\nCreate a function to encapsulate this calculation and reuse it multiple times:\n\ncalculate <- function(x) {\n  2 * x + 4\n}\n\nresult1 <- calculate(3)\nresult2 <- calculate(5)\nresult3 <- calculate(7)"
  },
  {
    "objectID": "slides/04_quality.html#what-are-common-clean-code-rules-1",
    "href": "slides/04_quality.html#what-are-common-clean-code-rules-1",
    "title": "Ensuring Quality",
    "section": "What are common clean code rules?",
    "text": "What are common clean code rules?\n\nComments: Use comments to explain the purpose of code blocks and to clarify complex logic.\nError Handling: Include error handling code to gracefully handle exceptions and unexpected situations.\nTest-Driven Development (TDD): Write tests for your code to ensure it behaves as expected and to catch bugs early.\nRefactoring: Regularly refactor your code to keep it clean, readable, and maintainable.\nCode Review: Have other team members review your code to catch potential issues and improve its quality."
  },
  {
    "objectID": "slides/04_quality.html#apply-clean-code-rules",
    "href": "slides/04_quality.html#apply-clean-code-rules",
    "title": "Ensuring Quality",
    "section": "Apply Clean Code Rules",
    "text": "Apply Clean Code Rules\n\nPhoto CC0 by Pavel Danilyuk on pexels.com"
  },
  {
    "objectID": "slides/04_quality.html#what-are-common-clean-code-rules-2",
    "href": "slides/04_quality.html#what-are-common-clean-code-rules-2",
    "title": "Ensuring Quality",
    "section": "What are common clean code rules?",
    "text": "What are common clean code rules?\n\nAvoid redundant code: Don’t repeat yourself!\nUse meaningful and understandable names for files, classes, functions, and arguments\nDon’t build too large source files, i.e., limit the maximum number of lines of code per file to 1,0001\n\nGeneral guideline: keeping the number of lines to less than 1,000 lines per file can help maintain code readability and manageability"
  },
  {
    "objectID": "slides/04_quality.html#how-to-apply-clean-code-rules-1",
    "href": "slides/04_quality.html#how-to-apply-clean-code-rules-1",
    "title": "Ensuring Quality",
    "section": "How to apply clean code rules?",
    "text": "How to apply clean code rules?\nIf important clean code rules are broken refactor the code:\n\nOutsource redundant code blocks to functions\nImprove the naming of files, classes, functions, and arguments\nSplit large source files into multiple files"
  },
  {
    "objectID": "slides/04_quality.html#how-to-improve-the-test-coverage",
    "href": "slides/04_quality.html#how-to-improve-the-test-coverage",
    "title": "Ensuring Quality",
    "section": "How to improve the test coverage?",
    "text": "How to improve the test coverage?\ncovr: Track and report code coverage for your package\n\nlibrary(covr)\nx <- package_coverage()\nreport(x)"
  },
  {
    "objectID": "slides/04_quality.html#how-to-apply-other-clean-code-rules",
    "href": "slides/04_quality.html#how-to-apply-other-clean-code-rules",
    "title": "Ensuring Quality",
    "section": "How to apply other clean code rules?",
    "text": "How to apply other clean code rules?\nIf important clean code rules are broken refactor the code:\n\nCCR#5 (DRY): Outsource redundant code blocks to functions\nCCR#1 (Naming): Improve the naming of files, classes, functions, and arguments\nCCR#3 (Simplicity): Split large1 source files into multiple files\n\nGeneral guideline: keeping the number of lines to less than 1,000 lines per file can help maintain code readability and manageability"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr5-dont-repeat-yourself",
    "href": "slides/04_quality.html#example-ccr5-dont-repeat-yourself",
    "title": "Ensuring Quality",
    "section": "Example CCR#5: Don’t repeat yourself!",
    "text": "Example CCR#5: Don’t repeat yourself!\nSuppose you have a code block that performs the same calculation multiple times:\n\nresult1 <- 2 * 3 + 4\nresult2 <- 2 * 5 + 4\nresult3 <- 2 * 7 + 4\n\nCreate a function to encapsulate this calculation and reuse it multiple times:\n\ncalculate <- function(x) {\n  2 * x + 4\n}\n\nresult1 <- calculate(3)\nresult2 <- calculate(5)\nresult3 <- calculate(7)"
  },
  {
    "objectID": "slides/04_quality.html#how-to-apply-refactoring",
    "href": "slides/04_quality.html#how-to-apply-refactoring",
    "title": "Ensuring Quality",
    "section": "How to apply refactoring?",
    "text": "How to apply refactoring?\nIf important clean code rules are broken refactor the code:\n\nCCR#5 (DRY): Outsource redundant code blocks to functions\nCCR#1 (Naming): Improve the naming of files, classes, functions, and arguments\nCCR#3 (Simplicity): Split large1 source files into multiple files\n\nGeneral guideline: keeping the number of lines to less than 1,000 lines per file can help maintain code readability and manageability"
  },
  {
    "objectID": "slides/04_quality.html#how-to-do-refactoring",
    "href": "slides/04_quality.html#how-to-do-refactoring",
    "title": "Ensuring Quality",
    "section": "How to do refactoring?",
    "text": "How to do refactoring?\n\nCCR#9: Refactoring\n\nCheck if clean code rules are broken:\n\nCCR#5 (DRY): Outsource redundant code blocks to functions\nCCR#1 (Naming): Improve the naming of files, classes, functions, and arguments\nCCR#3 (Simplicity): Split large1 source files into multiple files\n\nGeneral guideline: keeping the number of lines to less than 1,000 lines per file can help maintain code readability and manageability"
  },
  {
    "objectID": "slides/04_quality.html#preparation",
    "href": "slides/04_quality.html#preparation",
    "title": "Ensuring Quality",
    "section": "Preparation",
    "text": "Preparation\n\nSet up testing infrastructure,\nadd unit tests,\ntest-driven development,\ncheck,\n\ndownload zip file, no git stuff here yet, so that it is independent"
  },
  {
    "objectID": "slides/04_quality.html#example-of-an-r-script-with-poor-code-style",
    "href": "slides/04_quality.html#example-of-an-r-script-with-poor-code-style",
    "title": "Ensuring Quality",
    "section": "Example of an R script with poor code style",
    "text": "Example of an R script with poor code style\n\na<-c(1,2,3,4,5)\nb<-c(6,7,8,9,10)\nfor (i in 1:5){x<-a[i]+b[i];print(x)}\n\nThis code has several issues with code style:\n\nInconsistent indentation: There’s no clear structure to the code and it’s difficult to quickly see what each line of code is doing\nNo white space: The code is difficult to read because there’s no white space between expressions and statements\nAbbreviated variable names: The variable names a, b, and x are not descriptive and make the code less readable\nInadequate commenting: There’s no commentary explaining what the code does, making it difficult for someone else to understand or use the code"
  },
  {
    "objectID": "slides/04_quality.html#example-on-test-coverage",
    "href": "slides/04_quality.html#example-on-test-coverage",
    "title": "Ensuring Quality",
    "section": "Example on test coverage",
    "text": "Example on test coverage\nLet’s assume we have added a generic function to cat a simulation result:\n\n#' \n#' @export\n#'\ncat.SimulationResult <- function(... , file = \"\", sep = \" \", \n        fill = FALSE, labels = NULL, append = FALSE) {\n    args <- list(...)\n}\n\n\nBut we forgot to finalize the implementation and didn’t create unit tests.\nRe-execution of\n\nreport(package_coverage())\n\nthen results in…"
  },
  {
    "objectID": "slides/04_quality.html#example-on-test-coverage-1",
    "href": "slides/04_quality.html#example-on-test-coverage-1",
    "title": "Ensuring Quality",
    "section": "Example on test coverage",
    "text": "Example on test coverage"
  },
  {
    "objectID": "slides/04_quality.html#example-on-test-coverage-2",
    "href": "slides/04_quality.html#example-on-test-coverage-2",
    "title": "Ensuring Quality",
    "section": "Example on test coverage",
    "text": "Example on test coverage\nWe can go into the details by clicking on a file name:"
  },
  {
    "objectID": "slides/04_quality.html#example-broken-clean-code-rules",
    "href": "slides/04_quality.html#example-broken-clean-code-rules",
    "title": "Ensuring Quality",
    "section": "Example: broken clean code rules",
    "text": "Example: broken clean code rules\n\n\n\ny=function(x) {\n    s1=0\n    for(v1 in x){s1=s1+v1}\n    m1=s1/length(x)\n    \n    i=ceiling(length(x)/2)\n    if(length(x) %% 2 == 0){\n        i=c(i,i+1)\n    }\n    s2=0\n    for(v2 in i){s2=s2+x[v2]}\n    m2=s2/length(i)\n    c(m1,m2)\n}\ny(c(1:7, 100))\n\n[1] 16.0  4.5\n\n\n\n\nNaming\nFormatting\nSimplicity\nSingle Responsibility Principle (SRP)\nDon’t Repeat Yourself (DRY)\nComments\nError Handling\nTest-Driven Development (TDD)"
  },
  {
    "objectID": "slides/04_quality.html#example-broken-clean-code-rules-1",
    "href": "slides/04_quality.html#example-broken-clean-code-rules-1",
    "title": "Ensuring Quality",
    "section": "Example: broken clean code rules",
    "text": "Example: broken clean code rules\n\ngetMeanAndMedian=function(x) {\n    sum1=0\n    for(value in x){sum1=sum1+value}\n    meanValue=sum1/length(x)\n    \n    centerIndices=ceiling(length(x)/2)\n    if(length(x) %% 2 == 0){\n        centerIndices=c(centerIndices,centerIndices+1)\n    }\n    sum2=0\n    for(centerIndex in centerIndices){sum2=sum2+x[centerIndex]}\n    medianValue=sum2/length(centerIndices)\n    c(meanValue,medianValue)\n}\n\nCCR#1 Naming: Use descriptive and meaningful names for variables, functions, and classes"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr1",
    "href": "slides/04_quality.html#example-ccr1",
    "title": "Ensuring Quality",
    "section": "Example: CCR#1",
    "text": "Example: CCR#1\n\n\n\ny=function(x){\n  s1=0\n  for(v1 in x){s1=s1+v1}\n  m1=s1/length(x)\n  i=ceiling(length(x)/2)\n  if(length(x) %% 2 == 0){i=c(i,i+1)}\n  s2=0\n  for(v2 in i){s2=s2+x[v2]}\n  m2=s2/length(i)\n  c(m1,m2)\n}\ny(c(1:7, 100))\n\n[1] 16.0  4.5\n\n\n\nCCR#1 Naming: Are the names of the variables, functions, and classes descriptive and meaningful?"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr2",
    "href": "slides/04_quality.html#example-ccr2",
    "title": "Ensuring Quality",
    "section": "Example: CCR#2",
    "text": "Example: CCR#2\n\n\n\ngetMeanAndMedian <- function(x) {\n    sum1 <- 0\n    for (value in x) {\n        sum1 <- sum1 + value\n    }\n    meanValue <- sum1 / length(x)\n    centerIndices <- ceiling(length(x) / 2)\n    if (length(x) %% 2 == 0) {\n        centerIndices <- c(\n          centerIndices, centerIndices + 1)\n    }\n    sum2 <- 0\n    for (centerIndex in centerIndices) {\n        sum2 <- sum2 + x[centerIndex]\n    }\n    medianValue <- sum2 / length(centerIndices)\n    c(meanValue, medianValue)\n}\n\n\nCCR#2 Formatting \nCCR#3 Simplicity: Did you keep the code as simple and straightforward as possible, i.e., did you avoid unnecessary complexity"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr3",
    "href": "slides/04_quality.html#example-ccr3",
    "title": "Ensuring Quality",
    "section": "Example: CCR#3",
    "text": "Example: CCR#3\nNote:\n\nFrom the Simplicity rule also follows that large source files should be split into multiple files\nGeneral guideline: keeping the number of lines to less than 1,000 lines per file can help maintain code readability and manageability"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr4",
    "href": "slides/04_quality.html#example-ccr4",
    "title": "Ensuring Quality",
    "section": "Example: CCR#4",
    "text": "Example: CCR#4\n\ngetMean <- function(x) {\n    sum(x) / length(x)\n}\n\nisLengthAnEvenNumber <- function(x) {\n    length(x) %% 2 == 0\n}\n\ngetMedian <- function(x) {\n    centerIndices <- ceiling(length(x) / 2)\n    if (isLengthAnEvenNumber(x)) {\n        centerIndices <- c(centerIndices, centerIndices + 1)\n    }\n    sum(x[centerIndices]) / length(centerIndices)\n}\n\nCCR#4 Single Responsibility Principle (SRP) \nCCR#5 Don’t Repeat Yourself (DRY): Did you avoid duplication of code, either by reusing existing code or creating functions"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr5",
    "href": "slides/04_quality.html#example-ccr5",
    "title": "Ensuring Quality",
    "section": "Example: CCR#5",
    "text": "Example: CCR#5\n\nCCR#5: DRY\n\nSuppose you have a code block that performs the same calculation multiple times:\n\nresult1 <- 2 * 3 + 4\nresult2 <- 2 * 5 + 4\nresult3 <- 2 * 7 + 4\n\nCreate a function to encapsulate this calculation and reuse it multiple times:\n\ncalculate <- function(x) {\n  2 * x + 4\n}\n\nresult1 <- calculate(3)\nresult2 <- calculate(5)\nresult3 <- calculate(7)"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr6",
    "href": "slides/04_quality.html#example-ccr6",
    "title": "Ensuring Quality",
    "section": "Example: CCR#6",
    "text": "Example: CCR#6\n\n\n\n# returns the mean of x\ngetMean <- function(x) {\n    sum(x) / length(x)\n}\n\n# returns TRUE if the length of x is \n# an even number; FALSE otherwise\nisLengthAnEvenNumber <- function(x) {\n    length(x) %% 2 == 0\n}\n\n# returns the median of x\ngetMedian <- function(x) {\n    centerIndices <- ceiling(length(x) / 2)\n    if (isLengthAnEvenNumber(x)) {\n        centerIndices <- c(centerIndices, \n             centerIndices + 1)\n    }\n    getMean(x[centerIndices])\n}\n\n\nCCR#6 Comments \nCCR#7 Error Handling: Did you include error handling code to gracefully handle exceptions and unexpected situations \n\ngetMean(\"a\":\"z\")\n\nError in “a”:“z” : NA/NaN argument Additionally: Warning messages: In getMean(“a”:“z”) : NAs generated by conversion"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr7",
    "href": "slides/04_quality.html#example-ccr7",
    "title": "Ensuring Quality",
    "section": "Example: CCR#7",
    "text": "Example: CCR#7\n\n# returns the mean of x\ngetMean <- function(x) {\n    tryCatch({\n        sum(x) / length(x)      \n    }, error = function(e) {\n        stop(\"Failed to calculate the mean of 'x': \", e$message)\n    })\n}\n\n# returns TRUE if the length of x is an even number; FALSE otherwise\nisLengthAnEvenNumber <- function(x) {\n    tryCatch({\n        length(x) %% 2 == 0\n    }, error = function(e) {\n        stop(\"Failed to check if 'x' is an even number: \", e$message)\n    })\n}\n\n# returns the median of x\ngetMedian <- function(x) {\n    tryCatch({\n        centerIndices <- ceiling(length(x) / 2)\n        if (isLengthAnEvenNumber(x)) {\n            centerIndices <- c(centerIndices, centerIndices + 1)\n        }\n        getMean(x[centerIndices])            \n    }, error = function(e) {\n        stop(\"Failed to calculate the median of 'x': \", e$message)\n    })\n}\n\nCCR#7 Error Handling"
  },
  {
    "objectID": "slides/04_quality.html#example-clean-code-rules---step-by-step",
    "href": "slides/04_quality.html#example-clean-code-rules---step-by-step",
    "title": "Ensuring Quality",
    "section": "Example: Clean Code Rules - Step by Step",
    "text": "Example: Clean Code Rules - Step by Step\nThis script breaks all common clean code rules:\n\ny=function(x){\n  s1=0\n  for(v1 in x){s1=s1+v1}\n  m1=s1/length(x)\n  i=ceiling(length(x)/2)\n  if(length(x) %% 2 == 0){i=c(i,i+1)}\n  s2=0\n  for(v2 in i){s2=s2+x[v2]}\n  m2=s2/length(i)\n  c(m1,m2)\n}\ny(c(1:7, 100))\n\n[1] 16.0  4.5\n\n\n\nWe now refactor it (CCR#9) by applying clean code rules…"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr6-1",
    "href": "slides/04_quality.html#example-ccr6-1",
    "title": "Ensuring Quality",
    "section": "Example: CCR#6",
    "text": "Example: CCR#6\n\n\n\n# returns the mean of x\ngetMean <- function(x) {\n    sum(x) / length(x)\n}\n\n# returns TRUE if the length of x is \n# an even number; FALSE otherwise\nisLengthAnEvenNumber <- function(x) {\n    length(x) %% 2 == 0\n}\n\n# returns the median of x\ngetMedian <- function(x) {\n    centerIndices <- ceiling(length(x) / 2)\n    if (isLengthAnEvenNumber(x)) {\n        centerIndices <- c(centerIndices, \n             centerIndices + 1)\n    }\n    getMean(x[centerIndices])\n}\n\n\nCCR#6 Comments \nCCR#7 Error Handling: Did you include error handling code to gracefully handle exceptions and unexpected situations"
  },
  {
    "objectID": "slides/04_quality.html#summary-of-clean-code-rules",
    "href": "slides/04_quality.html#summary-of-clean-code-rules",
    "title": "Ensuring Quality",
    "section": "Summary of Clean Code Rules",
    "text": "Summary of Clean Code Rules\n\nNaming: Use descriptive and meaningful names for variables, functions, and classes\nFormatting: Adhere to consistent indentation, spacing, and bracketing to make the code easy to read\nSimplicity: Keep the code as simple and straightforward as possible, avoiding unnecessary complexity\nSingle Responsibility Principle (SRP): Each function should have a single, well-defined purpose\nDon’t Repeat Yourself (DRY): Avoid duplication of code, either by reusing existing code or creating functions"
  },
  {
    "objectID": "slides/04_quality.html#summary-of-clean-code-rules-1",
    "href": "slides/04_quality.html#summary-of-clean-code-rules-1",
    "title": "Ensuring Quality",
    "section": "Summary of Clean Code Rules",
    "text": "Summary of Clean Code Rules\n\nComments: Use comments to explain the purpose of code blocks and to clarify complex logic\nError Handling: Include error handling code to gracefully handle exceptions and unexpected situations\n Test-Driven Development (TDD): Write tests for your code to ensure it behaves as expected and to catch bugs early\nRefactoring: Regularly refactor your code to keep it clean, readable, and maintainable\n Code Review: Have other team members review your code to catch potential issues and improve its quality"
  },
  {
    "objectID": "slides/04_quality.html#code-styler-in-rstudio",
    "href": "slides/04_quality.html#code-styler-in-rstudio",
    "title": "Ensuring Quality",
    "section": "Code Styler in RStudio",
    "text": "Code Styler in RStudio\n\nBrowse addinsLink styler to keyboard shortcut"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr9",
    "href": "slides/04_quality.html#example-ccr9",
    "title": "Ensuring Quality",
    "section": "Example: CCR#9",
    "text": "Example: CCR#9\n\n\n\ny=function(x){\n  s1=0\n  for(v1 in x){s1=s1+v1}\n  m1=s1/length(x)\n  i=ceiling(length(x)/2)\n  if(length(x) %% 2 == 0){i=c(i,i+1)}\n  s2=0\n  for(v2 in i){s2=s2+x[v2]}\n  m2=s2/length(i)\n  c(m1,m2)\n}\ny(c(1:7, 100))\n\n[1] 16.0  4.5\n\n\n\nCCR#1 Naming: Are the names of the variables, functions, and classes descriptive and meaningful?"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr1-1",
    "href": "slides/04_quality.html#example-ccr1-1",
    "title": "Ensuring Quality",
    "section": "Example: CCR#1",
    "text": "Example: CCR#1\n\ngetMeanAndMedian=function(x){\n    sum1=0\n    for(value in x){sum1=sum1+value}\n    meanValue=sum1/length(x)\n    centerIndices=ceiling(length(x)/2)\n    if(length(x) %% 2 == 0){\n        centerIndices=c(centerIndices,centerIndices+1)\n    }\n    sum2=0\n    for(centerIndex in centerIndices){sum2=sum2+x[centerIndex]}\n    medianValue=sum2/length(centerIndices)\n    c(meanValue,medianValue)\n}\n\nCCR#1 Naming \nCCR#2 Formatting: Are indentation, spacing, and bracketing consistent, i.e., is the code easy to read"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr3-1",
    "href": "slides/04_quality.html#example-ccr3-1",
    "title": "Ensuring Quality",
    "section": "Example: CCR#3",
    "text": "Example: CCR#3\n\ngetMeanAndMedian <- function(x) {\n    meanValue <- sum(x) / length(x)\n    centerIndices <- ceiling(length(x) / 2)\n    if (length(x) %% 2 == 0) {\n        centerIndices <- c(centerIndices, centerIndices + 1)\n    }\n    medianValue <- sum(x[centerIndices]) / length(centerIndices)\n    c(meanValue, medianValue)\n}\n\nCCR#3 Simplicity \nCCR#4 Single Responsibility Principle (SRP): Has each function a single, well-defined purpose"
  },
  {
    "objectID": "slides/04_quality.html#example-ccr5-1",
    "href": "slides/04_quality.html#example-ccr5-1",
    "title": "Ensuring Quality",
    "section": "Example: CCR#5",
    "text": "Example: CCR#5\n\ngetMean <- function(x) {\n    sum(x) / length(x)\n}\n\nisLengthAnEvenNumber <- function(x) {\n    length(x) %% 2 == 0\n}\n\ngetMedian <- function(x) {\n    centerIndices <- ceiling(length(x) / 2)\n    if (isLengthAnEvenNumber(x)) {\n        centerIndices <- c(centerIndices, centerIndices + 1)\n    }\n    getMean(x[centerIndices])\n}\n\nCCR#5 Don’t Repeat Yourself (DRY) \nCCR#6 Comments: Did you use comments to explain the purpose of code blocks and to clarify complex logic"
  },
  {
    "objectID": "slides/04_quality.html#tasks",
    "href": "slides/04_quality.html#tasks",
    "title": "Ensuring Quality",
    "section": "Tasks",
    "text": "Tasks\n\nTask 1Task 2Task 3Task 4\n\n\nTake your local simulatr package project (see previous excercise) and refactor it, i.e., apply the linked clean code rules:\n\nOptimize naming manually (CCR#1)\nUse the styler package to optimize the formatting (CCR#2)\nCheck and correct where appropriate:\n\nSimplicity (CCR#3)\nSRP (CCR#4)\nDRY (CCR#5)\n\n\n\n\n\nImplement appropriate error handling (CCR#7) in the simulatr package\nAdd comments to explain the purpose of code blocks (CCR#6)\n\nIf it concerns exported functions use Roxygen2 notation\n\nCheck correct spelling with the devtools function spell_check()\n\n\n\nApply CCR#8 to the simulatr package project:\n\nAdd unit tests\nOptimize your test coverage with help of the covr functions package_coverage and report\n\n\n\nCheck if your package is ready for use in production with the devtools function check()"
  },
  {
    "objectID": "slides/04_quality.html",
    "href": "slides/04_quality.html",
    "title": "Ensuring Quality",
    "section": "",
    "text": "Photo CC0 by Pavel Danilyuk on pexels.com\n\n\n\n\n\nMaintainability: The code is readable and understandable and has a reduced complexity, i.e., it’s easier to fix bugs\nExtensibility: The architecture is simpler, cleaner, and more expressive, i.e., it’s easier to extend the capabilities and the risk of introducing bugs is reduced\nPerformance: The code often runs faster, uses less memory, or is easier to optimize\n\n\n\n\nThis script breaks all common clean code rules:\n\ny=function(x){\n  s1=0\n  for(v1 in x){s1=s1+v1}\n  m1=s1/length(x)\n  i=ceiling(length(x)/2)\n  if(length(x) %% 2 == 0){i=c(i,i+1)}\n  s2=0\n  for(v2 in i){s2=s2+x[v2]}\n  m2=s2/length(i)\n  c(m1,m2)\n}\ny(c(1:7, 100))\n\n[1] 16.0  4.5\n\n\n\nWe now refactor it (CCR#9) by applying clean code rules…\n\n\n\n\n\n\n\ny=function(x){\n  s1=0\n  for(v1 in x){s1=s1+v1}\n  m1=s1/length(x)\n  i=ceiling(length(x)/2)\n  if(length(x) %% 2 == 0){i=c(i,i+1)}\n  s2=0\n  for(v2 in i){s2=s2+x[v2]}\n  m2=s2/length(i)\n  c(m1,m2)\n}\ny(c(1:7, 100))\n\n[1] 16.0  4.5\n\n\n\nCCR#1 Naming: Are the names of the variables, functions, and classes descriptive and meaningful?\n\n\n\n\n\n\ngetMeanAndMedian=function(x){\n    sum1=0\n    for(value in x){sum1=sum1+value}\n    meanValue=sum1/length(x)\n    centerIndices=ceiling(length(x)/2)\n    if(length(x) %% 2 == 0){\n        centerIndices=c(centerIndices,centerIndices+1)\n    }\n    sum2=0\n    for(centerIndex in centerIndices){sum2=sum2+x[centerIndex]}\n    medianValue=sum2/length(centerIndices)\n    c(meanValue,medianValue)\n}\n\nCCR#1 Naming \nCCR#2 Formatting: Are indentation, spacing, and bracketing consistent, i.e., is the code easy to read \n\n\n\n\n\n\ngetMeanAndMedian <- function(x) {\n    sum1 <- 0\n    for (value in x) {\n        sum1 <- sum1 + value\n    }\n    meanValue <- sum1 / length(x)\n    centerIndices <- ceiling(length(x) / 2)\n    if (length(x) %% 2 == 0) {\n        centerIndices <- c(\n          centerIndices, centerIndices + 1)\n    }\n    sum2 <- 0\n    for (centerIndex in centerIndices) {\n        sum2 <- sum2 + x[centerIndex]\n    }\n    medianValue <- sum2 / length(centerIndices)\n    c(meanValue, medianValue)\n}\n\n\nCCR#2 Formatting \nCCR#3 Simplicity: Did you keep the code as simple and straightforward as possible, i.e., did you avoid unnecessary complexity \n\n\n\n\n\nNote:\n\nFrom the Simplicity rule also follows that large source files should be split into multiple files\nGeneral guideline: keeping the number of lines to less than 1,000 lines per file can help maintain code readability and manageability\n\n\n\n\n\ngetMeanAndMedian <- function(x) {\n    meanValue <- sum(x) / length(x)\n    centerIndices <- ceiling(length(x) / 2)\n    if (length(x) %% 2 == 0) {\n        centerIndices <- c(centerIndices, centerIndices + 1)\n    }\n    medianValue <- sum(x[centerIndices]) / length(centerIndices)\n    c(meanValue, medianValue)\n}\n\nCCR#3 Simplicity \nCCR#4 Single Responsibility Principle (SRP): Has each function a single, well-defined purpose \n\n\n\n\ngetMean <- function(x) {\n    sum(x) / length(x)\n}\n\nisLengthAnEvenNumber <- function(x) {\n    length(x) %% 2 == 0\n}\n\ngetMedian <- function(x) {\n    centerIndices <- ceiling(length(x) / 2)\n    if (isLengthAnEvenNumber(x)) {\n        centerIndices <- c(centerIndices, centerIndices + 1)\n    }\n    sum(x[centerIndices]) / length(centerIndices)\n}\n\nCCR#4 Single Responsibility Principle (SRP) \nCCR#5 Don’t Repeat Yourself (DRY): Did you avoid duplication of code, either by reusing existing code or creating functions \n\n\n\n\nCCR#5: DRY\n\nSuppose you have a code block that performs the same calculation multiple times:\n\nresult1 <- 2 * 3 + 4\nresult2 <- 2 * 5 + 4\nresult3 <- 2 * 7 + 4\n\nCreate a function to encapsulate this calculation and reuse it multiple times:\n\ncalculate <- function(x) {\n  2 * x + 4\n}\n\nresult1 <- calculate(3)\nresult2 <- calculate(5)\nresult3 <- calculate(7)\n\n\n\n\n\ngetMean <- function(x) {\n    sum(x) / length(x)\n}\n\nisLengthAnEvenNumber <- function(x) {\n    length(x) %% 2 == 0\n}\n\ngetMedian <- function(x) {\n    centerIndices <- ceiling(length(x) / 2)\n    if (isLengthAnEvenNumber(x)) {\n        centerIndices <- c(centerIndices, centerIndices + 1)\n    }\n    getMean(x[centerIndices])\n}\n\nCCR#5 Don’t Repeat Yourself (DRY) \nCCR#6 Comments: Did you use comments to explain the purpose of code blocks and to clarify complex logic \n\n\n\n\n\n\n# returns the mean of x\ngetMean <- function(x) {\n    sum(x) / length(x)\n}\n\n# returns TRUE if the length of x is \n# an even number; FALSE otherwise\nisLengthAnEvenNumber <- function(x) {\n    length(x) %% 2 == 0\n}\n\n# returns the median of x\ngetMedian <- function(x) {\n    centerIndices <- ceiling(length(x) / 2)\n    if (isLengthAnEvenNumber(x)) {\n        centerIndices <- c(centerIndices, \n             centerIndices + 1)\n    }\n    getMean(x[centerIndices])\n}\n\n\nCCR#6 Comments \nCCR#7 Error Handling: Did you include error handling code to gracefully handle exceptions and unexpected situations \n\ngetMean(\"a\":\"z\")\n\nError in “a”:“z” : NA/NaN argument Additionally: Warning messages: In getMean(“a”:“z”) : NAs generated by conversion\n\n\n\n\n\n\n# returns the mean of x\ngetMean <- function(x) {\n    tryCatch({\n        sum(x) / length(x)      \n    }, error = function(e) {\n        stop(\"Failed to calculate the mean of 'x': \", e$message)\n    })\n}\n\n# returns TRUE if the length of x is an even number; FALSE otherwise\nisLengthAnEvenNumber <- function(x) {\n    tryCatch({\n        length(x) %% 2 == 0\n    }, error = function(e) {\n        stop(\"Failed to check if 'x' is an even number: \", e$message)\n    })\n}\n\n# returns the median of x\ngetMedian <- function(x) {\n    tryCatch({\n        centerIndices <- ceiling(length(x) / 2)\n        if (isLengthAnEvenNumber(x)) {\n            centerIndices <- c(centerIndices, centerIndices + 1)\n        }\n        getMean(x[centerIndices])            \n    }, error = function(e) {\n        stop(\"Failed to calculate the median of 'x': \", e$message)\n    })\n}\n\nCCR#7 Error Handling \n\n\n\n\nNaming: Use descriptive and meaningful names for variables, functions, and classes\nFormatting: Adhere to consistent indentation, spacing, and bracketing to make the code easy to read\nSimplicity: Keep the code as simple and straightforward as possible, avoiding unnecessary complexity\nSingle Responsibility Principle (SRP): Each function should have a single, well-defined purpose\nDon’t Repeat Yourself (DRY): Avoid duplication of code, either by reusing existing code or creating functions\n\n\n\n\n\nComments: Use comments to explain the purpose of code blocks and to clarify complex logic\nError Handling: Include error handling code to gracefully handle exceptions and unexpected situations\n Test-Driven Development (TDD): Write tests for your code to ensure it behaves as expected and to catch bugs early\nRefactoring: Regularly refactor your code to keep it clean, readable, and maintainable\n Code Review: Have other team members review your code to catch potential issues and improve its quality\n\n\n\n\nRecommended quality workflow for R packages:\n\nFollow the naming and styling guidelines (#1, #2)\nContinuously write tests and optimize the code coverage with help of tools (#7, #8)\nDocument the package and functions (#6)\nRegularly refactor your code (#1 - #7, #9)\nPublish your code on GitHub and invite colleagues to contribute (#10)"
  }
]