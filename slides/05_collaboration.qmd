---
title: "Collaboration"
author: "Kevin"
format: 
  revealjs
description: description. Photo CC0 by THIS IS ZUN on pexels.com.
image: thumbnails/collaboration.jpg
---


## Disclaimer

...


## {background-image=resources/scratch.jpg}

::: {.absolute bottom=100 left=0 right=650}
* Will only scratch the surface
* Quick overview, then demo & practical
* Check out resources on course website!
:::

::: {.footer}
Photo by <a href="https://unsplash.com/@rhubbardstockfootage?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Rich @ rhubbardstockfootage</a> on <a href="https://unsplash.com/photos/dEATKItQazc?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
:::


## Trade-off in code development

:::: {.columns}

::: {.column width="50%"}
working alone
:::

::: {.column width="50%"}
working in a team
:::

::::


## {background-image=resources/complexity.jpg}

::: {.absolute top=200 left=625}
Common theme: **manage complexity** over time or between people
:::

::: {.footer}
Photo from <a href="https://unsplash.com/@timmossholder?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Tim Mossholder</a> on <a href="https://unsplash.com/de/fotos/FwzhysPCQZc?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
:::


## Version control systems

* Manage different versions of a piece of work
* Compare and merge diverged versions effectively

```{mermaid}
flowchart LR
  A[Kevin v1] --> B[Kevin v2]
  B --> C[Kevin v3]
  B --> D[Daniel v1]
  D --> E[Kevin + Daniel v4]
  C --> E
```

* Merging parallel edits is not trivial (try it in MS Word 365)


## Enter 'git'


## Stage & commit

::: {.columns}
:::: {.column width="30%"}
![](resources/commit.jpg)
::::
:::: {.column width="70%"}
```{mermaid}
%%| fig-width: 6
%%| fig-height: 2
gitGraph
   commit
   commit
   commit
   commit
   commit
```

- permanently 'commit' commit changes to git database
- before committing: 'stage' changes for inspection

::::
:::

::: {.footer}
Photo by <a href="https://unsplash.com/@feliciamontenegro?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Felicia Montenegro</a> on <a href="https://unsplash.com/photos/VKnWrMnxahg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
:::


## Branching

::: {.columns}
:::: {.column width="30%"}
![](resources/branch.jpg)
::::
:::: {.column width="70%"}
```{mermaid}
%%| fig-width: 6
%%| fig-height: 2
gitGraph
   commit
   commit
   branch feature
   checkout feature
   commit
   commit
   checkout main
   commit
```

- variations of repository, 'branches' 
- work asynchronously

::::
:::

::: {.footer}
Photo by <a href="https://unsplash.com/@milatovar?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Mila Tovar</a> on <a href="https://unsplash.com/photos/nZ6Gg6zgfbE?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
:::



## Merging two branches

::: {.columns}
:::: {.column width="30%"}
![](resources/merge.jpg)
::::
:::: {.column width="70%"}
```{mermaid}
%%| fig-width: 6
%%| fig-height: 2
gitGraph
   commit
   commit
   branch feature
   checkout feature
   commit
   commit
   checkout main
   commit
   merge feature
```

- consolidate diverged 'branches'
- usually merged automergically
- conflicting changes `r fontawesome::fa("skull")`

::::
:::

::: {.footer}
Photo by <a href="https://unsplash.com/@maxlarochelle?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Max LaRochelle</a> on <a href="https://unsplash.com/photos/c-vWdiICscA?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
:::


## Example of 'gitflow'

```{mermaid}
%%| fig-width: 8
%%| fig-height: 4
gitGraph
   commit tag: "v0.0.1"
   commit
   branch feature-1
   checkout feature-1
   commit
   commit
   branch feature-2
   checkout feature-2
   commit
   checkout feature-1
   commit
   checkout main
   commit tag: "bugfix"
   merge feature-1 tag: "v0.1.0"
   checkout feature-2
   commit
```

- 'gitflow': specific workflow for git repositories
- features developed on branches, then merged into 'main' 


## Demo



## Connection to Collaboration?

- git helps taming chaos when multiple people work on code basis
- transparent incremental changes (diffs)


## GitHub.com


## {background-iframe="https://r-universe.dev/search/" background-interactive="true"}


## Github actions & CI/CD


## A GitHub.com change cycle {.scrollable}

```{mermaid}
sequenceDiagram
    participant K as Kevin
    participant GH as Github server
    participant D as Daniel
    K->>K: make change locally & commit to <feature>
    K->>GH: push commit
    K->>GH: open pull request
    GH->>GH: run automated checks
    K->>D: request review
    D->>D: review code
    D->>K: request changes
    K->>K: implement changes locally & commit
    K->>GH: push commit
    GH->>GH: run automated checks
    K->>D: request review
    D->>D: review code
    D->>GH: approve changes, unblocking merge
    K->>GH: merge <feature> into <main>
    GH->>GH: run automated checks on <main>
    D->>GH: pull newest version of <main>
```


## Looks awefully complicated, why?

* Safe/efficient collaboration with novice/untrusted people
* Reviewer: rely on automated checks to reduce burden
  * static code analysis (style, linting)
  * passing all unit tests
  * building documentation
* Asynchronous work on features

$\leadsto$ making code-collaboration scalable


## Demo

* Live demonstration of a github cycle
* Dummy template repository at ...
  * Can be 'copied' by anyone
* I will make a change and have it reviewed
* Follow along live on the repository


## Practical

* Work in teams of 3
* Go to [https://github.com/kkmann/simulatr](https://github.com/kkmann/simulatr) and read through the instructions
* One(!) team member clicks on 'Use this template' button and invites the others as collaborators
* ...

