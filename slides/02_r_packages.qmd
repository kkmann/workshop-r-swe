---
title: "R packages"
author: "Daniel"
format: 
  revealjs
description: description. Photo CC0 by cottonbro studio on pexels.com.
image: thumbnails/packages.jpg
---

## What you know already

- Packages provide a mechanism for loading optional code, data and documentation as needed.
- A library is a directory into which packages are installed. 
- `install.packages()` and `R CMD INSTALL` is used to install packages into the library.
- `library()` is used to load packages from the library.
  - This attaches the packages at the same time.
- Remember that package $\neq$ library!
  
## What we want to talk about now

- How to write, build, test, and check your own package `r emoji::emoji("blush")`
- How to do this in a good and sustainable way.
- Give tips and tricks based on practical experience.

## How is a package structured?

Package source = directory with files and subdirectories.

::: columns
::: {.column width="50%"}
- Mandatory:
  - DESCRIPTION
  - NAMESPACE
  - R
  - man
:::

::: {.column width="50%"}
- Typically also:
  - data
  - inst
  - src
  - tests
  - vignettes
  - NEWS
:::
:::

## How to get started quickly

Once upon a time, developers would set up this structure manually. `r emoji::emoji("yawning_face")`

Nowadays, it is super fast with:

- `usethis::create_package()` 
- RStudio > File > New Project > New Directory > R Package

![](resources/rstudio-rpackage.png){.r-stretch}

## `DESCRIPTION` File

- *Package*: Choose the name of your package. 
  - Not unimportant!
  - Check CRAN whether your name is still available.
- *Title*: Add a Title for Your Package. (Title Case)
- *Version*: Start with a low package version.
  - `Major.Minor.Patch` syntax
- *Authors@R*: Add authors and maintainer.
- *Description*: Like an abstract, including references.

## `DESCRIPTION` File (cont'd)

- *License*: Important for open sourcing.
  - Consider permissive licenses such as Apache and MIT.
- *Depends*:
  - Which R version users need to have at least.
  - Packages that are loaded upon loading your package.
- *Imports*: Packages which you import functions, methods, classes from.
- *Suggests*: Packages for documentation processing (`roxygen2`), running examples, tests (`testthat`), vignettes.

## `R` Folder

- Only contains R code files (recommended to use `.R` suffix)
  - Can create a file with `usethis::use_r("filename")`
- Assigns R objects, i.e. mostly functions, but could also be constant variables, data sets, etc.
- Should not have any side effects, i.e. avoid `require()`, `options()` etc.
- If certain code needs to be sourced first, use on top of file:

```{r}
#| echo: true
#| eval: false
#' @include dependency.R
NULL
```

## `NAMESPACE` File

- Defines the namespace of the package, to work with R's namespace management system
- Namespace directives in this file allow to specify:
  - which objects are exported to users and other packages
  - which are imported from other packages
  
## `NAMESPACE` File (cont'd)

- Controls the search strategy for variables:
  1. Local (in the function body etc.)
  2. Package namespace
  3. Imports
  4. Base namespace
  5. Normal `search()` path

## `man` Folder

- Contains documentation files for the objects in the package in the `.Rd` format
  - The syntax is a bit similar like `LaTeX`
- All user level objects should be documented
- Internal objects don't need to be documented, but may be (and I would recommend it)
- Once upon a time, developers would set up these `.Rd` files and the `NAMESPACE` manually. `r emoji::emoji("yawning_face")`
- Fortunately, nowadays we have `roxygen2`! `r emoji::emoji("rocket")`

## `roxygen2` to the Rescue!

- We can include the documentation source directly in the R script, on top of the objects we are documenting
- Syntax is composed of special comments `#'` and special macros preceded with `@`
- In RStudio running Build > More > Document will render the `.Rd` files and the `NAMESPACE` file for you
- Get started with `usethis::use_roxygen_md()`
- Inside a function, click Code > Insert Roxygen Skeleton 

## Setting up `roxygen2` in your project

![](resources/roxygen2-setting.png){.r-stretch}

## `roxygen2` Source

```{r}
#| echo: true
#| eval: false
#' My Summation Function
#'
#' This is my first function and it sums two numbers.
#'
#' @param x first summand.
#' @param y second summand.
#'
#' @return The sum of `x` and `y`.
#' @export
#' 
#' @note This function is a bit boring but that is ok.
#' @seealso [Arithmetic] for an easier way.
#'
#' @examples
#' my_sum(1, 2)
my_sum <- function(x, y) {
  x + y
}
```

## `roxygen2` Output

````
% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bla.R
\name{my_sum}
\alias{my_sum}
\title{My Summation Function}
\usage{
my_sum(x, y)
}
\arguments{
\item{x}{first summand.}

\item{y}{second summand.}
}
\value{
The sum of \code{x} and \code{y}.
}
\description{
This is my first function and it sums two numbers.
}
\note{
This function is a bit boring but that is ok.
}
\examples{
my_sum(1, 2)
}
\seealso{
\link{Arithmetic} for an easier way.
}
````

````
# Generated by roxygen2: do not edit by hand

export(my_sum)
````


## `tests` Folder

- Here we store the unit tests covering the functionality of the package
- Get started with `usethis::use_testthat()` and `usethis::use_test()`
  and populate `tests/testthat` folder with unit tests
- Rarely, tests cannot be run within `testthat` framework, then these can go
  into R scripts directly in `tests` directory
- We will look at unit tests in detail later

## `data` Folder

- For (example) data that you ship in your package to the user
  - Get started with `usethis::use_data()`
  - Note: Usually we use lazy data loading, therefore no `data()` call needed
    before using the data
- If you generate the example data, save the R script, too
  - Put that into `data-raw` folder, start with `usethis::use_data_raw()`
- Not for data that is used by functions in the package itself
  - Those would go into `inst/extdata` folder



## Exercise

## References

- [Writing R Extensions](https://cran.r-project.org/doc/manuals/R-exts.html)
